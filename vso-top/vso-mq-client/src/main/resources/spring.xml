<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context.xsd
             http://www.springframework.org/schema/rabbit  
    			http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd  
    		http://www.springframework.org/schema/task  
    			http://www.springframework.org/schema/task/spring-task-4.1.xsd">

	<!-- spring-rabbitmq -->
	<!-- 连接服务配置 -->
	<rabbit:connection-factory id="connectionFactory"
		host="192.168.1.200" username="test" password="test" port="5672" />

	<rabbit:admin connection-factory="connectionFactory" />

	<!-- queue 队列声明 -->
	<rabbit:queue id="test_queue" durable="true" auto-delete="false"
		exclusive="false" name="registerUser1" />
	<!-- 修改用户 -->
	<rabbit:queue id="user_modify_queue" durable="true" auto-delete="false"
		exclusive="false" name="modifyUser" />
	<!--  notifyRecord -->
	<rabbit:queue id="user_notifyrecord_queue" durable="true" auto-delete="false"
		exclusive="false" name="notifyRecord" />
	
	
	
	
	
	<!-- exchange queue binging key 绑定 -->
	<!-- <rabbit:direct-exchange name="my-mq-exchange" durable="true" auto-delete="false" 
		id="my-mq-exchange"> <rabbit:bindings> <rabbit:binding queue="test_queue" 
		key="test_queue_key"/> </rabbit:bindings> </rabbit:direct-exchange> -->

	<!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 -->
	<rabbit:listener-container
		connection-factory="connectionFactory" acknowledge="auto" concurrency="10"
		task-executor="taskExecutor">
		<rabbit:listener queues="test_queue" ref="userInfoReceiver" />
		<rabbit:listener queues="user_modify_queue" ref="userModifyReceiver" />
		<rabbit:listener queues="user_notifyrecord_queue" ref="usernotifyRecordReceiver" />
	</rabbit:listener-container>
	
	
	
	<bean id="userInfoReceiver" class="com.landhightech.receive.UserInfoReceiver"></bean>
	<bean id="userModifyReceiver" class="com.landhightech.receive.UserModifyReceiver"></bean>
	<bean id="usernotifyRecordReceiver" class="com.landhightech.receive.NotifyRecordReceiver"></bean>
	
	
	<!-- 异步的线程池，线程池的最小数不能设定太小，不然<rabbit:listener/>/@RabbitListener太多的话，会出现发无法正常消费问题 -->
	<task:executor id="taskExecutor" pool-size="60"
		queue-capacity="1000" />
	<!-- spring-rabbitmq -->

	<!-- spring-quartz -->
	<!-- 处理用户信息的工作定时任务，15分钟触发一次 -->
	<bean id="userDbJob" class="com.landhightech.quartz.mq.UserDbJob"></bean>
	<!-- 定义调用对象和调用对象的方法 -->
	<bean id="userDbTask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 调用的类 -->
		<property name="targetObject">
			<ref bean="userDbJob" />
		</property>
		<!-- 调用类中的方法 -->
		<property name="targetMethod">
			<value>work</value>
		</property>
	</bean>
	<!-- 定义触发时间 -->
	<bean id="userDbTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="userDbTask" />
		</property>
		<!-- cron表达式 -->
		<property name="cronExpression">
			<value>0 0/3 * * * ?</value>
		</property>
	</bean>
	
	
	<!-- 处理NotifyRecordDbRetryJob，15分钟触发一次 -->
	<bean id="notifyrecordDbJob" class="com.landhightech.quartz.mq.NotifyRecordDbRetryJob"></bean>
	<!-- 定义调用对象和调用对象的方法 -->
	<bean id="notifyrecordDbTask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 调用的类 -->
		<property name="targetObject">
			<ref bean="notifyrecordDbJob" />
		</property>
		<!-- 调用类中的方法 -->
		<property name="targetMethod">
			<value>work</value>
		</property>
	</bean>
	<!-- 定义触发时间 -->
	<bean id="notifyrecordDbTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="notifyrecordDbTask" />
		</property>
		<!-- cron表达式 -->
		<property name="cronExpression">
			<!-- <value>0 0/3 * * * ?</value> -->
			<value>5 * * * * ?</value>
		</property>
	</bean>
	
	
	
	
	<!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序 -->
	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="userDbTime" />
				<ref bean="notifyrecordDbTime" />
			</list>
		</property>
	</bean>
	<!-- spring-quartz -->
</beans>